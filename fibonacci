#include <iostream>

using namespace std;

// Global variable to count steps in the recursive function
int recursiveSteps = 0;

// Recursive function to calculate Fibonacci numbers with step count
int fibonacciRecursive(int n) {
    recursiveSteps++;  // Count each function call as a step
    if (n <= 1) return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

// Iterative function to calculate Fibonacci numbers with step count
int fibonacciIterative(int n, int &iterativeSteps) {
    if (n <= 1) return n;

    int a = 0, b = 1, c;
    iterativeSteps = 0;  // Reset step count

    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
        iterativeSteps++;  // Count each iteration as a step
    }

    return b;
}

int main() {
    int n;

    cout << "Enter the Fibonacci term you want to calculate: ";
    cin >> n;

    // Calculate Fibonacci number using recursion
    recursiveSteps = 0;  // Reset recursive steps
    int resultRecursive = fibonacciRecursive(n);
    cout << "Recursive Fibonacci(" << n << ") = " << resultRecursive << ", Steps = " << recursiveSteps << endl;

    // Calculate Fibonacci number using iteration
    int iterativeSteps = 0;
    int resultIterative = fibonacciIterative(n, iterativeSteps);
    cout << "Iterative Fibonacci(" << n << ") = " << resultIterative << ", Steps = " << iterativeSteps << endl;

    return 0;
}
