X= df.drop('Outcome',axis=1)
y=df['Outcome']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=0)

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=5)

knn.fit(X_train,y_train)

knn_predictions=knn.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, knn_predictions))

# Calculate evaluation metrics
conf_matrix = confusion_matrix(y_test, knn_predictions)
accuracy = accuracy_score(y_test, knn_predictions)
error_rate = 1 - accuracy
precision = precision_score(y_test, knn_predictions)
recall = recall_score(y_test, knn_predictions)

print("KNN Performance")
print(classification_report(y_test, knn_predictions))
print("\n-------------------------------------------------")
print("Accuracy:", accuracy_score(y_test, knn_predictions))
print("\n-------------------------------------------------")
print("Confusion Matrix:\n", confusion_matrix(y_test, knn_predictions))

# Print the evaluation metrics

print(f"Error Rate: {error_rate:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")

import seaborn as sns
import matplotlib.pyplot as plt

cm=confusion_matrix(y_test,knn_predictions)
sns.heatmap(cm,annot=True,cmap='Blues',fmt='d', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual Class')
plt.xticks([0, 1], ['Non Diabetic', 'Diabetic'])
plt.yticks([0, 1], ['Non Diabetic', 'Diabetic'])
plt.show()

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, accuracy_score, precision_score, recall_score

