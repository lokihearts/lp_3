#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an item with weight and value
struct Item {
    int value, weight;

    // Constructor
    Item(int v, int w) : value(v), weight(w) {}
};

// Comparison function to sort items based on value/weight ratio
bool compare(const Item &a, const Item &b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2; // Sort in descending order of value-to-weight ratio
}

// Function to calculate maximum value for fractional knapsack
double fractionalKnapsack(int W, vector<Item> &items) {
    // Sort items by value-to-weight ratio
    sort(items.begin(), items.end(), compare);

    double maxValue = 0.0; // Variable to store the maximum value
    int currentWeight = 0; // Current weight in knapsack

    // Loop through all items
    for (const auto &item : items) {
        if (currentWeight + item.weight <= W) {
            // If the entire item can fit in the knapsack, take it
            currentWeight += item.weight;
            maxValue += item.value;
        } else {
            // If only part of the item can fit, take the fractional part
            int remainingWeight = W - currentWeight;
            maxValue += item.value * ((double)remainingWeight / item.weight);
            break; // Knapsack is full, break out of the loop
        }
    }

    return maxValue;
}

int main() {
    int n, W;

    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items;
    for (int i = 0; i < n; i++) {
        int value, weight;
        cout << "Enter value and weight for item " << i + 1 << ": ";
        cin >> value >> weight;
        items.push_back(Item(value, weight));
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> W;

    double maxValue = fractionalKnapsack(W, items);
    cout << "Maximum value in the knapsack = " << maxValue << endl;

    return 0;
}
